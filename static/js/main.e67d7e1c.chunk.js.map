{"version":3,"sources":["Components/AppHeader.js","Components/MainMenuButtons.js","state/action-creators/types.js","state/action-creators/listActionCreators.js","state/action-creators/itemActionCreators.js","Components/ListItem.js","Components/AddItemForm.js","Components/EditItemForm.js","Components/EditListForm.js","Components/SelectList.js","Components/SelectItemList.js","Components/ShoppingList.js","Components/AddListForm.js","Components/ShoppingListsPage.js","Components/WishList.js","Components/WishListsPage.js","Components/ContentPage.js","App.js","reportWebVitals.js","state/reducers/itemsReducer.js","state/reducers/listReducer.js","state/reducers/index.js","state/store.js","index.js"],"names":["AppHeader","props","className","displayBackButton","href","onClick","handleBackButton","title","MainMenuButtons","handleMainMenuButton","FETCH_LISTS","POST_LIST","DELETE_LIST","UPDATE_LIST","SELECT_LIST","REMOVE_SELECT_LIST","FETCH_ITEMS","POST_ITEM","DELETE_ITEM","UPDATE_ITEM","SELECT_ITEM_LIST_DATA","REMOVE_ITEM_LIST_DATA","CHECK_SELECT_ITEM","fetchLists","dispatch","fetch","then","res","json","data","type","payload","postList","list","console","log","method","headers","body","JSON","stringify","deleteList","id","updateList","selectList","listId","removeSelectedList","fetchItems","listItems","postItem","newItem","updateItem","item","deleteItem","itemId","setSelectItemListData","removeItemListData","checkItem","ListItem","useDispatch","bindActionCreators","itemActionCreators","useState","showDetails","setShowDetails","onDoubleClick","important","listItem","name","handleEditItemButton","quantity","AddItemForm","formData","formName","setFormName","formQuantity","setFormQuantity","formImportant","setFormImportant","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","validity","valid","checked","currentTarget","EditItemForm","handleSubmitEditItem","undefined","error","EditListForm","handleCloseListEditForm","listActionCreators","a","alert","SelectList","resetFormData","lists","useSelector","state","wishLists","index","map","SelectItemList","shoppingListId","resetForm","selectedItems","items","selectItemsList","handleCheckItem","updateItemsList","filter","forEach","ShoppingList","didSelectList","selectedList","selectedListItems","displayAddNewItemForm","setDisplayAddNewItemForm","displayAddItemFromListForm","setDisplayAddItemFromListForm","displayAddItemForm","setDisplayAddItemForm","displayListItems","setDisplayListItems","displayEditItemForm","setDisplayEditItemForm","displayEditListForm","setDisplayEditListForm","editItemId","setEditItemId","handleResetFormData","handleResetForm","length","wishListId","checkItems","itemIndex","findIndex","obj","getEditItemForm","window","confirm","AddListForm","listType","displayListForm","setDisplayListForm","ShoppingListsPage","shoppingLists","WishList","displayAddForm","setDisplayAddForm","WishListsPage","component","listIndex","getLists","ContentPage","activity","App","activities","setActivity","setTitle","useEffect","changeActivity","activityObj","setDisplayBackButton","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","combineReducers","action","wishListsData","shoppingListsData","afterPostLists","push","afterDeleteLists","listToDelete","deleteIndex","splice","afterUpdateList","updatedItem","updateIndex","selectedListId","selectedListIndex","createdItem","listAfterPost","newItemsList","element","deleteItemsList","selectItemList","selectItemsListAfterCheck","checkId","checkIndex","itemToCheck","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e67d7e1c.chunk.js","sourcesContent":["function AppHeader(props){\n    return (\n        <div className=\"AppHeader\"> \n            {props.displayBackButton ? <a className='headerBackButton' href='#MainMenu' onClick={props.handleBackButton}><i className='fa fa-arrow-left'></i></a> : ''}\n            <h1>{props.title}</h1>               \n        </div>\n  );\n}\n\nexport default AppHeader;","\nfunction MainMenuButtons(props){\n    return (\n    <div className='MainMenuButtons container container-fluid'>\n        <a onClick={() => props.handleMainMenuButton(1)} className='btn-block mainMenuButton' >Wishlist</a>\n        <a onClick={() => props.handleMainMenuButton(2)} className='btn-block mainMenuButton' >Shopping Lists</a>\n    </div>);\n}\n\nexport default MainMenuButtons;","export const FETCH_LISTS = 'FETCH_LISTS';\r\nexport const POST_LIST = 'POST_LIST'\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const UPDATE_LIST = 'UPDATE_LIST';\r\nexport const SELECT_LIST = 'SELECT_LIST';\r\nexport const REMOVE_SELECT_LIST = 'REMOVE_SELECT_LIST';\r\n\r\nexport const FETCH_ITEMS = 'FETCH_ITEMS';\r\nexport const POST_ITEM = 'POST_ITEM';\r\nexport const DELETE_ITEM ='DELETE_ITEM';\r\nexport const UPDATE_ITEM = 'UPDATE_ITEM';\r\nexport const SELECT_ITEM_LIST_DATA = 'SELECT_ITEM_LIST_DATA';\r\nexport const REMOVE_ITEM_LIST_DATA = 'REMOVE_ITEM_LIST_DATA';\r\nexport const CHECK_SELECT_ITEM = 'CHECK_SELECT_ITEM';","import {FETCH_LISTS, POST_LIST, DELETE_LIST, UPDATE_LIST, SELECT_LIST, REMOVE_SELECT_LIST} from  './types';\r\n\r\nexport const fetchLists = () => (dispatch) =>{\r\n    //console.log('fetchList action called');\r\n    fetch('http://localhost:5000/lists')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n        return dispatch({type: FETCH_LISTS, payload: data})\r\n    });\r\n}\r\n\r\n//POST LIST\r\n//Parameter: list object to be created\r\nexport const postList = (list) => (dispatch) => {\r\n    console.log('POST LIST', list);\r\n    fetch('http://localhost:5000/lists', {\r\n        method: 'POST', \r\n        headers: {'Content-type' : 'application/json'}, \r\n        body: JSON.stringify(list)})\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n        dispatch({type: POST_LIST, payload: data});\r\n    })    \r\n}\r\n\r\n//Delete all items from list before deleting list\r\n//Parameter: List object to be deleted\r\nexport const deleteList = (list) => (dispatch) => {\r\n    //console.log('DELETE LIST');\r\n    console.log(list.id)\r\n    fetch(`http://localhost:5000/lists/${list.id}`, {method: 'DELETE'})\r\n    .then(() => dispatch({type: DELETE_LIST, payload: list}));\r\n}\r\n\r\n//UPDATE LIST\r\n//Parameter: List object with the needed changes applied to it, DO NOT EDIT ID\r\nexport const updateList = (list) => (dispatch) => {    \r\n    fetch(`http://localhost:5000/lists/${list.id}`, {\r\n        method: 'PATCH', \r\n        headers: {'Content-Type' : 'application/json'}, \r\n        body: JSON.stringify(list)\r\n    })\r\n    .then(res => res.json)\r\n    .then(data => dispatch({type: UPDATE_LIST, payload: list}));\r\n}\r\n\r\nexport const selectList = (listId) => (dispatch) => {    \r\n    dispatch({type: SELECT_LIST, payload: listId});\r\n}\r\n\r\nexport const removeSelectedList = () => (dispatch) => {\r\n    dispatch({type: REMOVE_SELECT_LIST, payload: {}});\r\n}\r\n\r\n","import {FETCH_ITEMS, POST_ITEM, UPDATE_ITEM, DELETE_ITEM, SELECT_ITEM_LIST_DATA, REMOVE_ITEM_LIST_DATA, CHECK_SELECT_ITEM} from './types';\r\n\r\n//FETCH ITEMS\r\nexport const fetchItems = () => (dispatch) => {\r\n    //console.log(\"fetchItems action called\");\r\n    fetch('http://localhost:5000/listItems')\r\n    .then(res => res.json())\r\n    .then(listItems => {\r\n        return dispatch({type: FETCH_ITEMS, payload: listItems})\r\n    });\r\n}\r\n\r\n//POST ITEM\r\n//Parameter: created item object\r\nexport const postItem = (newItem) => (dispatch) => {\r\n    //console.log('POST ITEM', newItem);\r\n    fetch('http://localhost:5000/listItems', {\r\n        method: 'POST', \r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify(newItem),\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        return dispatch({type: POST_ITEM, payload: data})\r\n    })\r\n}\r\n\r\n//UPDATE ITEM\r\n//Parameter: item object with changes applied, DO NOT EDIT ID\r\nexport const updateItem = (item) => (dispatch) => {\r\n    fetch(`http://localhost:5000/listItems/${item.id}`, {\r\n        method: 'PATCH',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify(item)\r\n    })\r\n    .then(res => res.json)\r\n    .then(data => dispatch({type: UPDATE_ITEM, payload: item}))\r\n}\r\n\r\n//DELETE ITEM\r\n//Parameter: item id\r\nexport const deleteItem = (itemId) => (dispatch ) => {\r\n    fetch(`http://localhost:5000/listItems/${itemId}`, {method: 'DELETE'})\r\n    .then(() => dispatch({type: DELETE_ITEM, payload: itemId}))\r\n}\r\n\r\n//Initialise items list data for SelectItemsList component\r\n//Parameters: list of items from the selected list\r\nexport const setSelectItemListData = (listId) => (dispatch) =>{\r\n    dispatch({type: SELECT_ITEM_LIST_DATA, payload: listId});\r\n}\r\n\r\nexport const removeItemListData = () => (dispatch) =>{\r\n    dispatch({type: REMOVE_ITEM_LIST_DATA, payload: {}});\r\n}\r\n\r\nexport const checkItem = (itemId) => (dispatch) => {\r\n    dispatch({type: CHECK_SELECT_ITEM, payload: itemId});\r\n}\r\n\r\n//const [selectedItems, setSelectedItems] = useState(listItems.map(item => {return {name: item.name, checked: false}}));","import {itemActionCreators} from '../state/index';\nimport {bindActionCreators} from 'redux';\nimport {useDispatch} from 'react-redux';\nimport React ,{ useState } from 'react';\n\nconst ListItem = (props) => {\n    const dispatch = useDispatch();\n    const {updateItem, deleteItem} = bindActionCreators(itemActionCreators, dispatch)\n    const [showDetails, setShowDetails] = useState(false);\n\n    //Toggle Important on item\n    const handleDoubleClick = () => {\n        let item = props.item;\n        item.important = !item.important;\n        updateItem(item);\n    }\n\n    const handleEditItemButton = () => {\n        props.handleEditItemButton(props.item.id);\n    }\n\n    const handleDeleteButton = () => {\n        deleteItem(props.item.id)\n    }\n\n    const handleArrowClicked = () => {\n        setShowDetails(!showDetails)\n    }\n\n\n\n    //console.log(props.toggleImportant(props.listIndex, props.itemIndex));\n    return( \n    <div title='Double click to toggle important' onDoubleClick={handleDoubleClick} className='ListItem'>        \n        {props.listItem.important ? <i className='fa fa-star'></i>: ''}\n        <span>{props.listItem.name}</span>\n        <div className='itemOptions'>\n            <a href='#' className='addButton' onClick={handleEditItemButton}><i className='fa fa-edit icon'></i></a>\n            <a href='#' className='addButton' onClick={handleDeleteButton}><i className='fa fa-trash icon'></i></a>\n            <a href='#' className='addButton' onClick={handleArrowClicked}><i className={showDetails? 'fa fa-angle-down icon' : 'fa fa-angle-up icon'}></i></a>\n        </div>\n        {showDetails? <div className=\"container listItemDetails\">\n            <span>Quantity: {props.listItem.quantity}</span>\n        </div> : ''}        \n        <div className='line'></div>      \n    </div>\n    );\n}\n\n\nexport default ListItem;","import { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { itemActionCreators } from '../state/index';\r\n\r\nconst AddItemForm = ({listId, formData}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {postItem, setSelectItemListData} = bindActionCreators(itemActionCreators, dispatch);\r\n\r\n    const [formName, setFormName] = useState(formData.name);\r\n    const [formQuantity, setFormQuantity] = useState(formData.quantity);\r\n    const [formImportant, setFormImportant] = useState(formData.important);\r\n\r\n    const handleChangeName = (e) => {\r\n        setFormName(e.target.value);\r\n    }\r\n\r\n    //Changing form quantity\r\n    const handleChangeQuantity = (e) => {\r\n        //prevent non valid or negative numbers\r\n        const quantity = (e.target.validity.valid) ? \r\n            (e.target.value < 0 ? 0 : e.target.value) : formQuantity;\r\n\r\n        setFormQuantity(quantity);\r\n    }\r\n\r\n    const handleChangeImportant = (e) => {\r\n        setFormImportant(e.currentTarget.checked)\r\n    }\r\n\r\n    //Create new item and add to current buy list\r\n    const onSubmit = (event) =>{\r\n        event.preventDefault();\r\n\r\n        const item = {            \r\n            name: formName, \r\n            quantity: formQuantity, \r\n            important: formImportant,\r\n            listId: listId,\r\n        };\r\n\r\n        postItem(item);\r\n        setSelectItemListData(item.listId);\r\n\r\n        setFormName('');\r\n        setFormQuantity('1');\r\n        setFormImportant(false);\r\n    }\r\n    \r\n    return(    \r\n        <div className='AddItemForm well'>\r\n            <form onSubmit={onSubmit}>\r\n                <div className='row'>\r\n                    <label className='col-2'>Item Name</label>\r\n                    <input className='col-10' type='text' onChange={handleChangeName} value={formName} placeholder='Enter item name'/>\r\n                </div>\r\n                <div className='row'>\r\n                    <label className='col-2'>Quantity</label>\r\n                    <input className='col-10' type='number' onChange={handleChangeQuantity} value={formQuantity}/>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-2'>\r\n                    <label>Important</label>\r\n                    <input \r\n                        className='submitItemButton' \r\n                        type='checkbox' \r\n                        checked={formImportant}\r\n                        value={formImportant}\r\n                        onChange={handleChangeImportant}\r\n                    />\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <input type='submit' value='Submit'/>\r\n            </form>\r\n            <hr/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AddItemForm;","import { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { itemActionCreators } from '../state/index';\r\n\r\nconst EditItemForm = ({itemId, listId, formData, handleSubmitEditItem}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {updateItem} = bindActionCreators(itemActionCreators, dispatch);\r\n\r\n    const [formName, setFormName] = useState(formData.name);\r\n    const [formQuantity, setFormQuantity] = useState(formData.quantity);\r\n    const [formImportant, setFormImportant] = useState(formData.important);\r\n\r\n    const handleChangeName = (e) => {\r\n        setFormName(e.target.value);\r\n    }\r\n\r\n    //Changing form quantity\r\n    const handleChangeQuantity = (e) => {\r\n        //prevent non valid or negative numbers\r\n        const quantity = (e.target.validity.valid) ? \r\n            (e.target.value < 0 ? 0 : e.target.value) : formQuantity;\r\n\r\n        setFormQuantity(quantity);\r\n    }\r\n\r\n    const handleChangeImportant = (e) => {\r\n        setFormImportant(e.currentTarget.checked)\r\n    }\r\n\r\n    //Create new item and add to current buy list\r\n    const onSubmit = (event) =>{\r\n        event.preventDefault();\r\n\r\n        const item = {       \r\n            id: itemId,     \r\n            name: formName, \r\n            quantity: formQuantity, \r\n            important: formImportant,\r\n            listId: listId,\r\n        };\r\n\r\n        if(item !== undefined){\r\n            updateItem(item);\r\n        }\r\n        else{\r\n            console.error('Edit item undefined');\r\n        }\r\n\r\n        handleSubmitEditItem();\r\n    }\r\n\r\n    //Close\r\n    \r\n    return(    \r\n        <div className='AddItemForm'>\r\n            <form onSubmit={onSubmit}>\r\n                <div className='row'>\r\n                    <label className='col-2'>Item Name</label>\r\n                    <input className='col-10' type='text' onChange={handleChangeName} value={formName} placeholder='Enter item name'/>\r\n                </div>\r\n                <div className='row'>\r\n                    <label className='col-2'>Quantity</label>\r\n                    <input className='col-10' type='number' onChange={handleChangeQuantity} value={formQuantity}/>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-2'>\r\n                    <label>Important</label>\r\n                    <input \r\n                        className='submitItemButton' \r\n                        type='checkbox' \r\n                        checked={formImportant}\r\n                        value={formImportant}\r\n                        onChange={handleChangeImportant}\r\n                    />\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <input type='submit' value='Submit'/>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default EditItemForm;","import {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { listActionCreators } from '../state';\r\n\r\n//listType prop : 0 for WishList 1 for ShoppingList\r\nconst EditListForm = ({list, handleCloseListEditForm}) =>{\r\n    const [formName, setFormName] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n    const {updateList} = bindActionCreators(listActionCreators, dispatch)\r\n\r\n    //Form name text change\r\n    const onChange = (e) => {\r\n        setFormName(e.target.value);\r\n    }\r\n\r\n    //Form submit\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        console.log('submit form clicked');\r\n        if(formName !== ''){\r\n            list.name = formName;\r\n            updateList(list);   \r\n            handleCloseListEditForm();\r\n        }\r\n        else{\r\n            alert('Enter a name for the form');\r\n        }     \r\n    }\r\n\r\n    const onCancel = (e) => {\r\n        e.preventDefault();\r\n        handleCloseListEditForm();\r\n    }\r\n\r\n    return (\r\n        <div className='EditListForm listForm shadow-box'>\r\n            <form onSubmit={onSubmit}>\r\n                <div className='row container container-fluid'>\r\n                    <label className='col-2'>List Name</label>\r\n                    <input className='col-6' type='text'  value={formName} onChange={onChange}/>\r\n                    <button className='col-2 btn btn-dark col-md-offset-2' type='submit'>Submit</button>\r\n                    <button className='btn btn-dark col-2' onClick={onCancel}>Cancel</button>\r\n                </div>\r\n            </form>                   \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default EditListForm;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { listActionCreators } from \"../state\";\r\nimport { itemActionCreators } from \"../state\";\r\n\r\nconst SelectList = ({resetFormData}) => {\r\n    const lists = useSelector(state => state.lists.wishLists);\r\n    const dispatch = useDispatch();\r\n    const {selectList} = bindActionCreators(listActionCreators, dispatch);\r\n    const {setSelectItemListData} = bindActionCreators(itemActionCreators, dispatch);\r\n\r\n    //Get the value from the selected list to use as id for selectList\r\n    const onChange = (event) => {\r\n        let index = event.target.value; \r\n        if(index >= 0){             \r\n            let list = lists[index];\r\n            selectList(list.id);\r\n            setSelectItemListData(list.id);\r\n        }\r\n        else{\r\n            resetFormData();\r\n        }\r\n    }\r\n\r\n    //List out each ToBuyList in a select list\r\n    return (\r\n        <div className='SelectList'>\r\n            <select name='SelectList' className='tblList' onChange={onChange}>\r\n                <option key='-1' value='-1'>Select wishlist</option>\r\n                {lists.map((list, index) => {\r\n                    return <option key={index} value={index}>{list.name}</option>;})}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectList;","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { itemActionCreators } from '../state';\r\n\r\n\r\n\r\nconst SelectItemList = ({shoppingListId, listItems, resetForm, resetFormData}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const selectedItems = useSelector(state => state.items.selectItemsList)\r\n    const {updateItem, checkItem, } = bindActionCreators(itemActionCreators, dispatch);\r\n\r\n    console.log(selectedItems);\r\n\r\n\r\n    const handleCheckItem = (index) => {\r\n        \r\n        const item = selectedItems[index];\r\n        console.log('checked item ' + item.checked)\r\n        checkItem(item.data.id)\r\n    }\r\n\r\n    const onChange = (event) => {        \r\n        let index = event.target.value;\r\n        \r\n        handleCheckItem(index)\r\n    }\r\n\r\n    const updateItems = (items) => {\r\n        console.log(items);\r\n        items.forEach(item => {\r\n            item.listId = shoppingListId;\r\n            updateItem(item);\r\n        });\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const updateItemsList = selectedItems.filter((item, index) => {\r\n            const result = item.checked;\r\n            return result;\r\n        }).map(item => item.data);\r\n        console.log(updateItemsList);\r\n        updateItems(updateItemsList);\r\n        resetFormData();\r\n        resetForm();\r\n    }\r\n\r\n    return (\r\n        <div className='SelectItemList'>\r\n            <form onSubmit={onSubmit}>\r\n                <ul>\r\n                    {listItems.map((item, index) => \r\n                    {\r\n                        return <li key={index}>\r\n                            <label><input   \r\n                            index={index} \r\n                            type=\"checkbox\" \r\n                            value={index} \r\n                            checked={\r\n                                selectedItems[index].checked} \r\n                            onChange={onChange}/>{item.name}</label>\r\n                        \r\n                        </li>\r\n                    })}\r\n                </ul>\r\n                <button className='col-2 btn btn-dark col-md-offset-2' type='submit'>Submit</button>\r\n            </form>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectItemList;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { itemActionCreators, listActionCreators } from '../state';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport ListItem from './ListItem';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditItemForm from './EditItemForm';\r\nimport EditListForm from './EditListForm';\r\nimport SelectList from './SelectList';\r\nimport SelectItemList from './SelectItemList';\r\n\r\nconst ShoppingList = (props) => {    \r\n    const listItems = useSelector(state => state.items.items.filter((item => item.listId === props.list.id))); \r\n    const didSelectList = useSelector(state => state.lists.didSelectList);\r\n    const selectedList = useSelector(state => state.lists.selectedList);\r\n    const selectedListItems = useSelector(state => (selectedList === {}) ? [] : state.items.items.filter(item => {return item.listId == selectedList.id} ))\r\n\r\n    const [displayAddNewItemForm, setDisplayAddNewItemForm] = useState(false);\r\n    const [displayAddItemFromListForm, setDisplayAddItemFromListForm] = useState(false);\r\n\r\n    const [displayAddItemForm, setDisplayAddItemForm] = useState(false);    \r\n    const [displayListItems, setDisplayListItems] = useState(false);\r\n\r\n    const [displayEditItemForm, setDisplayEditItemForm] = useState(false);\r\n    const [displayEditListForm, setDisplayEditListForm] = useState(false);    \r\n    const [editItemId, setEditItemId] = useState(undefined);\r\n\r\n    const dispatch = useDispatch();\r\n    const {deleteList, removeSelectedList} = bindActionCreators(listActionCreators, dispatch);\r\n    const {deleteItem, removeItemListData} = bindActionCreators(itemActionCreators, dispatch)\r\n\r\n    const getList = () => {        \r\n        return listItems.map((listItem, index) => (\r\n            <ListItem \r\n                key={index} \r\n                item={listItem}\r\n                listId={props.list.id} \r\n                itemIndex={index} \r\n                listItem={listItem}\r\n                handleEditItemButton={handleEditItemButton}     \r\n            />))\r\n    }\r\n\r\n    \r\n    //Reset the data of the selectList and selectItemList\r\n    const handleResetFormData = () => {\r\n        removeSelectedList();\r\n        removeItemListData();\r\n    }\r\n\r\n    //Turns off the display for both form types\r\n    const handleResetForm = () => {\r\n        setDisplayAddItemFromListForm(false);\r\n        setDisplayAddNewItemForm(false);\r\n    }\r\n\r\n\r\n    //toggle displayAddForm\r\n    const handleAddItemButton = () => {\r\n        if(displayEditItemForm){\r\n            setDisplayEditItemForm(false);\r\n        }else{\r\n            setDisplayAddItemForm(!displayAddItemForm);\r\n        }        \r\n        if(displayAddItemFromListForm) setDisplayAddItemFromListForm(false)\r\n        handleResetFormData();\r\n    }\r\n\r\n    const handleDropDownButton = () => {\r\n        setDisplayListItems(!displayListItems);\r\n    }\r\n\r\n    const handleEditListButton = () => {\r\n        setDisplayEditListForm(true);\r\n    }\r\n\r\n    const handleDeleteListButton = () => {\r\n        if(listItems.length === 0){\r\n            //console.log('DELETE LIST BUTTON PRESSED ON LIST', props.list.id);\r\n            deleteList(props.list);\r\n        }\r\n        else{\r\n            alert('Delete all items from list before deleting.');\r\n        }\r\n        \r\n    }\r\n\r\n    //Set state for item to be edited and toggle display for the form to edit item\r\n    const handleEditItemButton = (id) => {\r\n        setDisplayAddItemForm(false);\r\n        setDisplayEditItemForm(!displayEditItemForm);\r\n        setEditItemId(id);\r\n    }\r\n\r\n    const handleSubmitEditItem = (item) => {        \r\n        setDisplayEditItemForm(false);\r\n    }\r\n\r\n    const handleCloseListEditForm = () => {\r\n        setDisplayEditListForm(false);\r\n    }\r\n\r\n    const handleNewItem = () => {\r\n        setDisplayAddNewItemForm(true);\r\n        setDisplayAddItemFromListForm(false);\r\n        handleResetFormData();\r\n\r\n        console.log(didSelectList)\r\n    }\r\n\r\n    const handleAddItemFromList = () => {        \r\n        setDisplayAddItemFromListForm(true);\r\n        setDisplayAddNewItemForm(false);\r\n      \r\n    }\r\n\r\n    const handleCompleteShopping = () => {\r\n        if(window.confirm('Are you sure you are complete with this list and want to remove the items?')){\r\n            console.log('Removing items from shopping list')\r\n            listItems.forEach(item => {\r\n                console.log('Delete item ', item.id);\r\n                deleteItem(item.id);\r\n            });\r\n        }else{\r\n            console.log('Shopping list completion aborted')\r\n        }\r\n\r\n    }\r\n\r\n    //Generate EditItemForm for the item selected\r\n    const getEditItemForm = () => {\r\n        const itemIndex = listItems.findIndex((obj) => obj.id === editItemId);\r\n        const item = listItems[itemIndex];\r\n        \r\n        return <EditItemForm \r\n            listId={props.list.id}\r\n            itemId={item.id}\r\n            formData={{                   \r\n                name: item.name, \r\n                quantity: item.quantity, \r\n                important: item.important\r\n            }}\r\n            handleSubmitEditItem={handleSubmitEditItem}\r\n        />\r\n    }\r\n\r\n    const getAddItemForm = () =>{\r\n        return <AddItemForm \r\n            listId={props.list.id}\r\n            formData={\r\n            {name : '', \r\n            quantity : 1, \r\n            important : false}}                    \r\n        /> \r\n    }\r\n\r\n    const getSelectList = () => {\r\n        return <SelectList resetForm={handleResetForm} resetFormData={handleResetFormData}/>;\r\n    }\r\n\r\n    const getEditListForm = () => {\r\n        return <EditListForm \r\n            list={props.list} \r\n            handleCloseListEditForm={handleCloseListEditForm}\r\n        />\r\n    }\r\n\r\n    const getSelectItemList = () => {\r\n        return <SelectItemList  \r\n            resetForm={handleResetForm} \r\n            resetFormData={handleResetFormData}\r\n            wishListId = {selectedList.id} \r\n            shoppingListId = {props.list.id}\r\n            listItems = {selectedListItems} \r\n            checkItems = {selectedListItems.map(item => {return {name: item.name, checked: false}})}\r\n        />  \r\n    }\r\n    \r\n\r\n\r\n\r\n    return(\r\n        <div className='WishList shadow-box container'>\r\n            <div className='listHeader row'>      \r\n                <h4 className='col-11'>{props.list.name}</h4>\r\n                <a className='button' onClick={handleDropDownButton}><i className={`fa ${displayListItems ? 'fa-angle-down' : 'fa-angle-up'} col-1 button dropDownButton`}></i></a>\r\n                <div className='listOptions'>\r\n                    <a onClick={handleAddItemButton}><i className='fa fa-plus button listOption'> {displayAddItemForm | displayEditItemForm ? 'Close' : 'Add Item'}</i></a>|\r\n                    <a onClick={handleEditListButton}> <i className='fa fa-edit button listOption'> Edit list</i></a>|\r\n                    <a onClick={handleDeleteListButton}> <i className='fa fa-edit button listOption'> Delete list</i></a>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className='form-container'>\r\n            { displayEditListForm? getEditListForm(): ''}  \r\n            {\r\n                //Display a form to add a new item only after Add Item is clicked\r\n                //Also close all other forms                \r\n                displayAddItemForm?\r\n                <div className='addFromButtons'>\r\n                    <button className='btn btn-dark btnAddFrom' onClick={handleAddItemFromList}>From WishList</button>\r\n                    <button className='btn btn-dark btnAddFrom' onClick={handleNewItem}>New Item</button>\r\n                    {\r\n                        displayAddNewItemForm ? getAddItemForm()\r\n                        : displayAddItemFromListForm?  getSelectList() : '' \r\n                    }\r\n                    { didSelectList ? getSelectItemList() : ''}\r\n                </div>\r\n                :displayEditItemForm?\r\n                getEditItemForm(): '' \r\n            }\r\n            </div>\r\n            \r\n            {//Show message if no items are in the list\r\n                displayListItems ? (\r\n                listItems.length > 0 ? \r\n                <div className='listContent'>\r\n                    {getList()}\r\n                    <button className='btn btn-dark' onClick={handleCompleteShopping}>Completed Shopping</button>\r\n                </div>\r\n                : 'No items to show') : ''\r\n            }   \r\n            \r\n            \r\n        </div>);\r\n}\r\nexport default ShoppingList\r\n","import {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { listActionCreators } from '../state';\r\n\r\n//listType prop : 0 for WishList 1 for ShoppingList\r\nconst AddListForm = ({listType}) =>{\r\n    const [displayListForm, setDisplayListForm] = useState(false);\r\n    const [formName, setFormName] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n    const {postList} = bindActionCreators(listActionCreators, dispatch)\r\n\r\n    //Form name text change\r\n    const onChange = (e) => {\r\n        setFormName(e.target.value);\r\n    }\r\n\r\n    //Form submit\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        console.log('submit form clicked');\r\n        const list = {name: formName, listType: 0};\r\n\r\n        postList(list);\r\n\r\n        setFormName('');\r\n        setDisplayListForm(false);\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='AddListForm listForm shadow-box'>\r\n        \r\n        {displayListForm ?\r\n            <form onSubmit={onSubmit}>\r\n                <div className='row container container-fluid'>\r\n                    <label className='col-2'>List Name</label>\r\n                    <input className='col-6' type='text'  value={formName} onChange={onChange}/>\r\n                    <button className='col-2 btn btn-dark col-md-offset-2' type='submit'>Submit</button>\r\n                    <button className='btn btn-dark col-2' onClick={() => {setDisplayListForm(!displayListForm)}}>Cancel</button>\r\n                </div>\r\n            </form> : \r\n            <button className='btn btn-dark btn-block' onClick={() => {setDisplayListForm(!displayListForm)}}>New List</button>\r\n        }\r\n            \r\n\r\n        \r\n    </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default AddListForm;","import ShoppingList from './ShoppingList';\r\nimport AddListForm from './AddListForm';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ShoppingListsPage = (props) => {\r\n    //console.log('ShoppingListsPage', props.TBLList);\r\n    const state = useSelector(state => state.lists.shoppingLists)\r\n    return(\r\n        <div className='ShoppingListsPage'>\r\n            <AddListForm />\r\n            \r\n            { state.length > 0 ? \r\n                state.map((list, index) => {\r\n                    return <ShoppingList key={list.id} list={list}/>\r\n                }): 'Nothing to show'}\r\n        </div>);\r\n    }\r\n\r\n\r\nexport default ShoppingListsPage;","import React, { useState } from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { listActionCreators } from '../state';\r\nimport ListItem from './ListItem';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditItemForm from './EditItemForm';\r\nimport EditListForm from './EditListForm';\r\n\r\nconst WishList = (props) => {\r\n    const state = useSelector(state => state.items); \r\n\r\n    const [displayAddForm, setDisplayAddForm] = useState(false);    \r\n    const [displayListItems, setDisplayListItems] = useState(false);\r\n    const [displayEditItemForm, setDisplayEditItemForm] = useState(false);\r\n    const [displayEditListForm, setDisplayEditListForm] = useState(false);\r\n    const [editItemId, setEditItemId] = useState(undefined);\r\n\r\n    const dispatch = useDispatch();\r\n    const {deleteList} = bindActionCreators(listActionCreators, dispatch);\r\n\r\n    const listItems = state.items.filter((item => item.listId == props.list.id));\r\n\r\n    const getList = () => {        \r\n        return listItems.map((listItem, index) => (\r\n            <ListItem \r\n                key={index} \r\n                item={listItem}\r\n                listId={props.list.id} \r\n                itemIndex={index} \r\n                listItem={listItem}\r\n                handleEditItemButton={handleEditItemButton}     \r\n            />))\r\n    }\r\n\r\n    //toggle displayAddForm\r\n    const handleAddItemButton = () => {\r\n        if(displayEditItemForm){\r\n            setDisplayEditItemForm(false);\r\n        }else{\r\n            setDisplayAddForm(!displayAddForm);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    const handleDropDownButton = () => {\r\n        setDisplayListItems(!displayListItems);\r\n    }\r\n\r\n    const handleEditListButton = () => {\r\n        setDisplayEditListForm(true);\r\n    }\r\n\r\n    const handleDeleteListButton = () => {\r\n        if(listItems.length === 0){\r\n            deleteList(props.list);\r\n        }\r\n        else{\r\n            alert('Delete all items from list before deleting.');\r\n        }\r\n        \r\n    }\r\n\r\n    //Set state for item to be edited and toggle display for the form to edit item\r\n    const handleEditItemButton = (id) => {\r\n        setDisplayAddForm(false);\r\n        setDisplayEditItemForm(!displayEditItemForm);\r\n        setEditItemId(id);\r\n    }\r\n\r\n    const handleSubmitEditItem = (item) => {        \r\n        setDisplayEditItemForm(false);\r\n    }\r\n\r\n    const handleCloseListEditForm = () => {\r\n        setDisplayEditListForm(false);\r\n    }\r\n\r\n    //Generate EditItemForm for the item selected\r\n    const getEditItemForm = () => {\r\n        const itemIndex = listItems.findIndex((obj) => obj.id == editItemId);\r\n        const item = listItems[itemIndex];\r\n        \r\n        return <EditItemForm \r\n            listId={props.list.id}\r\n            itemId={item.id}\r\n            formData={{                   \r\n                name: item.name, \r\n                quantity: item.quantity, \r\n                important: item.important\r\n            }}\r\n            handleSubmitEditItem={handleSubmitEditItem}\r\n        />\r\n    }\r\n\r\n    return(\r\n        <div className='WishList shadow-box container'>\r\n            <div className='listHeader row'>\r\n                                  \r\n                \r\n                <h4 className='col-11'>{props.list.name}</h4>\r\n                <a className='button' onClick={handleDropDownButton}><i className={`fa ${displayListItems ? 'fa-angle-down' : 'fa-angle-up'} col-1 button dropDownButton`}></i></a>\r\n                <div className='listOptions'>\r\n                    <a onClick={handleAddItemButton}><i className='fa fa-plus button listOption'> {displayAddForm | displayEditItemForm ? 'Close' : 'Add Item'}</i></a>|\r\n                    <a onClick={handleEditListButton}> <i className='fa fa-edit button listOption'> Edit list</i></a>|\r\n                    <a onClick={handleDeleteListButton}> <i className='fa fa-edit button listOption'> Delete list</i></a>\r\n\r\n                </div>\r\n            </div>\r\n            <div className='form-container'>\r\n            \r\n            {//Display form to edit List name\r\n                displayEditListForm? \r\n                <EditListForm \r\n                    list={props.list} \r\n                    handleCloseListEditForm={handleCloseListEditForm}\r\n                /> : ''\r\n            }  \r\n            {\r\n                //Display a form to add a new item only after Add Item is clicked\r\n                //Also close all other forms                \r\n                displayAddForm?\r\n                <AddItemForm \r\n                    listId={props.list.id}\r\n                    formData={\r\n                        {name : '', \r\n                        quantity : 1, \r\n                        important : false}}\r\n                    \r\n                />:displayEditItemForm?\r\n                getEditItemForm(): ''                                  \r\n               \r\n            }\r\n            </div>\r\n            \r\n            {//Show message if no items are in the list\r\n                displayListItems ? (\r\n                listItems.length > 0 ? \r\n                <div className='listContent'>\r\n                    {getList()}\r\n                </div>\r\n                : 'No items to show') : ''\r\n            }   \r\n            \r\n            \r\n        </div>);\r\n}\r\nexport default WishList\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {listActionCreators} from '../state/index';\r\nimport WishList from './WishList';\r\nimport AddListForm from './AddListForm';\r\n\r\n\r\n\r\nconst WishListsPage = (props) => {   \r\n    const state = useSelector(state => state.lists.wishLists);   \r\n\r\n    const getLists = () => {\r\n        let component = '';\r\n        if(state.length > 0){            \r\n            component = state.map((list, index) => {\r\n                return <WishList key={index} list={list} listIndex={index}/>\r\n            })\r\n        }\r\n        return component;\r\n    }\r\n    return(\r\n        <div className='WishListsPage'>\r\n            <AddListForm/>\r\n            { state.length > 0 ? <div>{getLists()}</div>: <div>Items not loaded</div>}         \r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default WishListsPage;","import MainMenuButtons from './MainMenuButtons';\nimport ShoppingListsPage from './ShoppingListsPage';\nimport WishListsPage from './WishListsPage';\nfunction ContentPage(props){    \n    return(\n        <div id='ContentPage'>\n            {(props.activity === 'Main_Menu' ? <MainMenuButtons handleMainMenuButton={props.handleMainMenuButton}/> : \n                (props.activity === 'Wish_Lists_Page' ? \n                    <WishListsPage/>\n                :(props.activity === 'Shopping_Lists' ? \n                    <ShoppingListsPage /> \n                : '')\n                )\n            )}\n        </div>        \n    );\n}\n\nexport default ContentPage;","import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport AppHeader from './Components/AppHeader';\nimport ContentPage from './Components/ContentPage';\nimport {bindActionCreators} from 'redux';\nimport {listActionCreators, itemActionCreators} from './state/index'\n\n\nfunction App() {\n  const activities = [\n    {title: 'Main Menu' ,name: 'Main_Menu'},\n    {title: 'Wishlists' ,name: 'Wish_Lists_Page'},\n    {title: 'Shopping Lists' ,name: 'Shopping_Lists'},\n    {title: 'Went Shopping' ,name: 'Went_Shopping'},]\n\n  const [activity, setActivity] = useState('Main_Menu');//activity keeps track of the page that needs to be shown\n  //activity names: Main_Menu, To_Buy_Lists\n\n  const [title, setTitle] = useState('Main Menu');\n\n  //List items for ToBuyListPage TEST use before adding database\n\n  const state = useSelector(state => state.list);\n\n  const dispatch = useDispatch();\n  const {fetchLists} = bindActionCreators(listActionCreators, dispatch);\n  const {fetchItems} = bindActionCreators(itemActionCreators, dispatch);\n\n  useEffect(() => {    \n    fetchLists();\n    fetchItems();        \n  },[state, fetchLists, fetchItems]);\n  \n  //Handle changing activities from passing an activity object from activies\n  const changeActivity = (activityObj) => {\n    setActivity(activityObj.name);\n    setTitle(activityObj.title);\n  }\n\n  //State to display back button or not\n  const [displayBackButton, setDisplayBackButton] = useState(false);\n\n  //Change Activities at main menu\n  const handleMainMenuButton = (index) => {\n    changeActivity(activities[index])\n    setDisplayBackButton(true);\n  }  \n\n  //Change activity back to Main_Menu\n  const handleBackButton = () => {\n    changeActivity(activities[0]);    \n    setDisplayBackButton(false);\n  };\n\n  return (  \n\n    <div className=\"App\">\n       <div><AppHeader \n                  title={title} \n                  handleBackButton={handleBackButton}\n                  displayBackButton={displayBackButton}\n              />\n              <ContentPage \n                  activity={activity} \n                  handleMainMenuButton={handleMainMenuButton}                  \n\n              /> \n\n          </div>\n    </div>\n  );\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import SelectItemList from '../../Components/SelectItemList';\r\nimport {FETCH_ITEMS, POST_ITEM, UPDATE_ITEM, DELETE_ITEM, SELECT_ITEM_LIST_DATA, REMOVE_ITEM_LIST_DATA, CHECK_SELECT_ITEM} from '../action-creators/types';\r\n\r\nconst initialState = {items: [], selectItemsList: []};\r\n\r\nexport default (state = initialState, action) => {\r\n    //let newItemsList = [...state.items];\r\n    switch (action.type) {\r\n        //Fetch items from api and update state\r\n        //Payload: array of listItem objects\r\n        case FETCH_ITEMS:       \r\n            return {...state, items: action.payload};\r\n        //Payload: new created list item\r\n        case POST_ITEM:\r\n            let createdItem = action.payload;\r\n            let listAfterPost =  [...state.items];\r\n            listAfterPost.push(createdItem);\r\n\r\n            return {...state, items: listAfterPost}\r\n        //Payload: listItem with needed changes applied to it\r\n        case UPDATE_ITEM:\r\n            //initialise new state data\r\n            let newItemsList = [...state.items];\r\n            let index = newItemsList.findIndex((element) => element.id === action.payload.id);\r\n\r\n            newItemsList[index] = action.payload;\r\n        \r\n            return {...state, items: newItemsList};\r\n        //Payload: listItem id that needs to be deleted\r\n        case DELETE_ITEM:\r\n            //delete item from list            \r\n            let deleteItemsList = [...state.items]\r\n            const itemIndex = deleteItemsList.findIndex((item) => item.id == action.payload);\r\n\r\n            if(itemIndex > -1){\r\n                deleteItemsList.splice(itemIndex, 1);\r\n            }\r\n            return{...state, items: deleteItemsList,};    \r\n            \r\n        //The following 3 actions are for the SelectItemsList for ShoppingList component to add item to a shopping list from a wishlist\r\n\r\n        //Payload: list id to select as the selectItemsList\r\n        //Select all items for the corresponding list and add a checked value for checking if the item is checked in a select list\r\n        case SELECT_ITEM_LIST_DATA: \r\n            let selectItemList = state.items.filter((item) => item.listId == action.payload);\r\n            selectItemList = selectItemList.map((item) => {return {data: item, checked: false}});\r\n            return{...state, selectItemsList: selectItemList};\r\n\r\n        //Payload: none\r\n        //Clear the selectItemsList so the data would be reinitialised as bugs were caused without reinitialisation\r\n        case REMOVE_ITEM_LIST_DATA:\r\n            return{...state, selectItemsList: []};\r\n\r\n        //Payload: itemId for item to be checked\r\n        //Toggle checked for item in selectItemList\r\n        case CHECK_SELECT_ITEM:\r\n            let selectItemsListAfterCheck = [...state.selectItemsList];\r\n            const checkId = action.payload;\r\n                       \r\n            const checkIndex = selectItemsListAfterCheck.findIndex(item => item.data.id === checkId)\r\n            if(checkIndex >= 0){\r\n                const itemToCheck = selectItemsListAfterCheck[checkIndex];\r\n                itemToCheck.checked = !itemToCheck.checked;\r\n                selectItemsListAfterCheck[checkIndex] = itemToCheck;\r\n\r\n                return{...state, selectItemsList: selectItemsListAfterCheck}\r\n            } \r\n            else{\r\n                console.log('Cannot find item to check id: ', checkId);\r\n                return {...state};\r\n            }\r\n\r\n            \r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {POST_LIST, FETCH_LISTS, DELETE_LIST, UPDATE_LIST, SELECT_LIST, REMOVE_SELECT_LIST} from  '../action-creators/types';\r\n\r\nconst initialState = {    \r\n    wishLists: [],\r\n    shoppingLists: [],\r\n    selectedList: {},\r\n    didSelectList: false\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        //Payload: array of list objects\r\n        case FETCH_LISTS: \r\n            //console.log('FETCH_LISTS action called')\r\n            let lists = action.payload;\r\n\r\n            //Split Lists into wishlists and shoppinglists\r\n            let wishListsData = lists.filter((list) => list.listType === 0);\r\n            let shoppingListsData = lists.filter((list) => list.listType !== 0);\r\n            return {...state, wishLists: wishListsData, shoppingLists: shoppingListsData};\r\n\r\n        //Payload: list object\r\n        case POST_LIST:\r\n            const postList = action.payload;\r\n            let afterPostLists = undefined;\r\n\r\n            //push list to wishlists or shoppinglists depending on listType\r\n            if(postList.listType === 0){\r\n                afterPostLists = [...state.wishLists];\r\n                afterPostLists.push(postList);\r\n                return {...state, wishLists: afterPostLists}\r\n            }\r\n            else{\r\n                afterPostLists = [...state.shoppingLists];\r\n                afterPostLists.push(postList);\r\n                return {...state, shoppingLists: afterPostLists}\r\n            }\r\n\r\n        //Payload: list id\r\n        case DELETE_LIST:\r\n            let afterDeleteLists = undefined;\r\n            let listToDelete = action.payload;\r\n            let deleteIndex = undefined;\r\n            \r\n\r\n            if(listToDelete.listType === 0){\r\n                afterDeleteLists = [...state.wishLists];\r\n                deleteIndex = afterDeleteLists.findIndex((obj) => obj.id === listToDelete.id);\r\n                //console.log('DELETE_INDEX',deleteIndex);\r\n                afterDeleteLists.splice(deleteIndex, 1);\r\n                return {...state, wishLists: afterDeleteLists};\r\n            }\r\n            else{\r\n                afterDeleteLists = [...state.shoppingLists];\r\n                deleteIndex = afterDeleteLists.findIndex((obj) => obj.id === listToDelete.id);\r\n                afterDeleteLists.splice(deleteIndex, 1);\r\n                return {...state, shoppingLists: afterDeleteLists};\r\n            }\r\n        \r\n        case UPDATE_LIST:\r\n            //Wishlist or Shopping\r\n            let afterUpdateList = undefined;\r\n            let updatedItem = action.payload;\r\n            let updateIndex = undefined;\r\n            \r\n            if(updatedItem.listType === 0){\r\n                afterUpdateList = [...state.wishLists];\r\n                updateIndex = afterUpdateList.findIndex((obj) => obj.id === updatedItem.id);\r\n                //console.log('DELETE_INDEX',updateIndex);\r\n                afterUpdateList.splice(updateIndex, 1, updatedItem);\r\n                return {...state, wishLists: afterUpdateList};\r\n            }\r\n            else{\r\n                afterUpdateList = [...state.shoppingLists];\r\n                updateIndex = afterUpdateList.findIndex((obj) => obj.id === updatedItem.id);\r\n                afterUpdateList.splice(updateIndex, 1, updatedItem);\r\n                return {...state, shoppingLists: afterUpdateList};\r\n            }\r\n\r\n            case SELECT_LIST: \r\n                let selectedListId = action.payload\r\n                let selectedListIndex = state.wishLists.findIndex(list => list.id === selectedListId);\r\n                let selectedList = state.wishLists[selectedListIndex];\r\n\r\n                return {...state, selectedList: selectedList, didSelectList: true};\r\n\r\n            case REMOVE_SELECT_LIST:\r\n                return {...state, selectedList: {}, didSelectList: false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport itemsReducer from './itemsReducer';\r\nimport listReducer from './listReducer';\r\n\r\nexport default combineReducers({\r\n    lists: listReducer,\r\n    items: itemsReducer,\r\n});","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport reducers from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './state/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}